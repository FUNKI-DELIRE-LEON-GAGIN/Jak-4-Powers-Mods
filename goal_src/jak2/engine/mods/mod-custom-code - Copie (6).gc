    ;;-*-Lisp-*-
    (in-package goal)

    ;; name: mod-custom-code.gc
    ;; name in dgo: mod-custom-code
    ;; dgos: TODO


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; What is this file for.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| This file contains function defenitions that are pre placed in the mod base,
    so if you place custom code inside of these functions, it will exectue based on
    the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
    to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
    an orb |#


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Begin function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;



;; (spawn-actor-by-name "squid-2")  ;; SPAWN UN OBJECT PAR SON NOM D ENTITY gun-buoy-1








(define initialized? #f) ;; variable globale pour ne faire qu'une fois





(define *giant-jak* #f)











(defun music-manager ()
  (stop-main-music)
  (case (-> (level-get-target-inside *level*) name)
    (('test-zone)
     ;;  (if (> (knuth-rand-int-range 0 15) (+ 8 5))
     ;;   (play-main-music "SND/music-test-zone.mp3" (the int (-> *setting-control* default music-volume)))
     ;;   (play-main-music "SND/music-test-zone-track2.mp3" (the int (-> *setting-control* default music-volume))))
     )
    ;;Add more cases here for each level
    (else
     (play-main-music "" (the int (-> *setting-control* user-current music-volume)
))
     ;;(stop-main-music) This function is broken but playing a invalid sound does the same thing
     ))
  (none))

(defbehavior music-manager-proc process ()
  (music-manager)
  (none))






(defun spawn-actor-by-name ((name string))
  (let* ((entity-actor (the entity-actor (entity-by-name name)))
         (type (-> entity-actor etype))
         (e-info (entity-info-lookup type)))
    (when entity-actor
      (init-entity
        (get-process *default-dead-pool* type (if e-info (-> e-info heap-size) #x4000))
        entity-actor
        process) ;; <- symbole process par défaut
      (sound-play "buzzer-pickup"))
    (if (not entity-actor)
        (sound-play "oof")))
  (none))






(defun draw-xyz ((jak target) (x float) (y float) (z float))
  (set! (-> jak draw color-mult x) x)
  (set! (-> jak draw color-mult y) y)
  (set! (-> jak draw color-mult z) z))

(defun draw-normal ((jak target))
  (draw-xyz jak 1.0 1.0 1.0))

(defun draw-white ((jak target))
  (draw-xyz jak 10.0 10.0 10.0))

(defun draw-black ((jak target))
  (draw-xyz jak 0.0 0.0 0.0))

(defun draw-red ((jak target))
  (draw-xyz jak 3.0 0.0 0.0))

(defun draw-green ((jak target))
  (draw-xyz jak 0.0 3.0 0.0))

(defun draw-my-blue ((jak target)) ;; Nouveau nom pour éviter le conflit
  (draw-xyz jak 0.0 0.0 3.0))


(defun draw-yellow ((jak target))
  (draw-xyz jak 3.0 3.0 0.0))

(defun draw-pink ((jak target))
  (draw-xyz jak 3.0 0.0 3.0))

(defun draw-light-blue ((jak target))
  (draw-xyz jak 0.0 3.0 3.0))









    (defun runs-every-frame ()
      ;; (increase-power-cell-by-one) This is a call to increase-power-cell-by-one defined in mod-common-functions.gc

      ;; Sample code to turn jak pink whenever he's doing the jetboard hover glitch
      ;; (when *target* 
      ;;   (if (board-hovering?)
      ;;     (draw-pink *target*)
      ;;     (draw-normal *target*)
      ;;     )
      ;;   )





(when *giant-jak*
  (let ((target-root (-> (the-as target *target*) root)))
    (set! (-> target-root scale x) 0.3)
    (set! (-> target-root scale y) 0.3)
    (set! (-> target-root scale z) 0.3)))






















;; FAIT UNE SEULE FOIS AU DEBUT DU JEU
















  (when (not initialized?)





;; BEAU TEMPS DE BZ


(send-event (ppointer->process *time-of-day*) 'change 'hour 12)

;; BEAU NUAGE FAIT CRASH EN NORMALE...  (when *time-of-day-context*
 
;; (set! (-> *time-of-day-context* overide-enable) #t))

      ;;      (set! (-> *time-of-day-context* current-clouds cloud-min) 0.5)
      ;;      (set! (-> *time-of-day-context* current-clouds cloud-max) 1.0) 


;; BEAU TEMPS DE BZ



    ;; Termine l’histoire directement
    (task-node-close! (game-task-node city-keira-delivery-resolution))

    ;; Termine l’histoire directement
        ;;(task-node-close! (game-task-node city-win-resolution))



    ;; Donne toutes les munitions et collectibles au target
    (send-event *target* 'get-pickup (pickup-type ammo-yellow) 1000.0)
    (send-event *target* 'get-pickup (pickup-type ammo-red) 1000.0)
    (send-event *target* 'get-pickup (pickup-type ammo-blue) 1000.0)
    (send-event *target* 'get-pickup (pickup-type ammo-dark) 1000.0)
    (send-event *target* 'get-pickup (pickup-type eco-pill-dark) 1000.0)
    (send-event *target* 'get-pickup (pickup-type skill) 1000.0)
    (send-event *target* 'get-pickup (pickup-type gem) 5000.0)

  



  

  ;; Déverrouille tout dans le jeu
    (logior! (-> *game-info* features)
             (game-feature gun gun-yellow gun-red gun-blue gun-dark
                           gun-upgrade-speed gun-upgrade-ammo gun-upgrade-damage
                           pass-red pass-green pass-yellow pass-blue board
                           darkjak darkjak-bomb0 darkjak-bomb1 darkjak-invinc darkjak-giant))

    ;; Active les pouvoirs Dark Jak
    (logior! (-> *game-info* features)
             (game-feature darkjak darkjak-bomb0 darkjak-bomb1 darkjak-invinc darkjak-giant))




    (set! initialized? #t)) ;; on ne refait pas à chaque frame




    (update-rates! (-> *display* camera-clock) 2.0)


































(when (and (cpad-hold? 0 x) (cpad-pressed? 0 up)  



(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))


(set! *giant-jak* (not *giant-jak*))





 ;;(spawn-actor-by-name "krew-boss-1")  ;; SPAWN UN OBJECT PAR SON NOM D ENTITY gun-buoy-1




   





(send-event (ppointer->process *time-of-day*) 'change 'hour 12)



  ))













;;;; --------------------------------------------------------------------------------------------------------------
;;;; R1 SHOOT SPECIAL !
;;;; --------------------------------------------------------------------------------------------------------------



(when (and (cpad-hold? 0 r1) (cpad-pressed? 0 l1)  



(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))
(someone-fire-yellow *target* (-> *target* gun fire-point) (-> *target* gun fire-dir-out))



  ))






















;;;; --------------------------------------------------------------------------------------------------------------
;;;; L3 CAM SPECIAL !
;;;; --------------------------------------------------------------------------------------------------------------



;;;; FREE CAM

(when (and *display* (cpad-hold? 0 l3) (cpad-pressed? 0 triangle))
   (when *target*


(set-setting-by-param *setting-control* 'mode-name 'free-floating 0 0)

 (kill-by-type hud-map *active-pool*)

         


(sound-play "timer-warn")


(set-setting! 'process-mask 'set 0.0 (process-mask enemy platform projectile death actor-pause   sleep sleep-code collectable ambient heap-shrunk target)) ;crate
 (set! *pause-lock* #f)

  ))



;;;; FOV DU JEU


(when (and *display* (cpad-hold? 0 l3) (cpad-pressed? 0 down))




(sound-play "skill-pickup")

  ) 





(when (and *display* (cpad-hold? 0 l3) (cpad-pressed? 0 l1))


  ;; SE GAMELER FAIL
(send-event *target* 'loading)

(sound-play "skill-pickup")

  )




;;;; L3 RESET LA CAM

(when (cpad-pressed? 0 l3)
  (when *target*

(set-setting-by-param *setting-control* 'mode-name 'cam-string 0 0)


(set-setting! 'process-mask 'clear 0.0 (process-mask enemy platform projectile death   freeze pause menu progress entity movie))

(sound-play "skill-pickup")


;; Recrée l’HUD de la map
(process-spawn hud-map :init hud-init-by-other :name "hud-map" :to *target*)



  ) ) 












;;;; --------------------------------------------------------------------------------------------------------------
;;;; R3 CAM SPECIAL !
;;;; --------------------------------------------------------------------------------------------------------------


;;;; premier personne FIRST PERSON

(when (cpad-pressed? 0 r3)
   (when *target*

(set-setting-by-param *setting-control* 'mode-name 'cam-eye 0 0)

;; Rendre Jak invisible
(logior! (-> *target* draw status) (draw-control-status no-draw-bounds2))





(sound-play "skill-pickup")


  ) ) 
























































;;;; --------------------------------------------------------------------------------------------------------------
;;;; TRIANGLE CONTROLE DU TEMPS
;;;; --------------------------------------------------------------------------------------------------------------

;;;;(when (and (cpad-hold? 0 triangle) (cpad-pressed? 0 left)  

;;;;(update-rates!
 ;;;; (-> *display* entity-clock)
  ;;;;(seek (-> *display* entity-clock clock-ratio) 1.0 (* 120.0 (seconds-per-frame)))) ;;; ) 0.2 ( LA VITESSE DU TEMPS ENTRE DE BASE 1.0

;;;;  ))





(when (and *display* (cpad-hold? 0 triangle) (cpad-pressed? 0 left))




(sound-play "timer-warn")



  (let* ((current-speed (-> *display* entity-clock clock-ratio))
         (new-speed (- current-speed 0.25))) ;; nouvelle vitesse, toujours -0.25

    (if (<= current-speed 0.0)
        ;; Si temps à 0 ou moins, on applique directement la vitesse calculée (new-speed)
        (begin
          (update-rates! (-> *display* entity-clock) new-speed)
          (update-rates! (-> *display* bg-clock) new-speed)
         )
        ;; Sinon on fait la transition doucement (seek)
        (update-rates!
          (-> *display* entity-clock)
          (seek current-speed new-speed (* 120.0 (seconds-per-frame)))))
    
    ;; Mettre aussi à jour bg-clock et target-clock dans ce cas ?
    (when (> current-speed 0.0)
      (update-rates! (-> *display* bg-clock) new-speed)
      )))














(when (and *display* (cpad-hold? 0 triangle) (cpad-pressed? 0 right))

(sound-play "timer-beep")
 

  (let* ((current-speed (-> *display* entity-clock clock-ratio))
         (new-speed (if (< current-speed 0.0)
                        (- current-speed -0.25)  ; si vitesse < 0 → continue vers 0 (monte vers zéro en négatif)
                        (+ current-speed 0.25)))) ; sinon accélère le temps normalement
    (if (>= current-speed 0.0)
        ;; Si vitesse positive ou nulle, transition douce
        (begin
          (update-rates!
            (-> *display* entity-clock)
            (seek current-speed new-speed (* 120.0 (seconds-per-frame))))
          (update-rates! (-> *display* bg-clock) new-speed))
        ;; Sinon vitesse négative ou moins, applique directement new-speed pour remonter
        (begin
          (update-rates! (-> *display* entity-clock) new-speed)
          (update-rates! (-> *display* bg-clock) new-speed))))
)
















(when (and (cpad-hold? 0 triangle) (cpad-pressed? 0 down)  


    



(sound-play "skill-pickup")




     
(update-rates! (-> *display* entity-clock) 1.0)
(update-rates! (-> *display* bg-clock) 1.0)
(update-rates! (-> *display* target-clock) 1.0)

    


  ))







(when (and (cpad-hold? 0 triangle) (cpad-pressed? 0 up)  


(sound-play "timer-beep")
(sound-play "explode-small")
(sound-play "explode-large")
(sound-play "money-pickup")
(sound-play "buzzer-pickup")

(sound-play "menu-accept")
(sound-play "menu-denied")
(sound-play "hover-start")
(sound-play "teleport")
(sound-play "warp-in")
(sound-play "gun-shot")
(sound-play "gun-reload")

(sound-play "roll")
(sound-play "roll-end")
(sound-play "dash")
(sound-play "hit-hard")
(sound-play "hit-soft")
(sound-play "spin")
(sound-play "eco-pickup")
(sound-play "eco-spawn")
(sound-play "enemy-alert")
(sound-play "enemy-die")

(sound-play "siren")
(sound-play "warning")
(sound-play "power-on")
(sound-play "vehicle-boost")
(sound-play "vehicle-crash")
(sound-play "vehicle-engine")
(sound-play "talk-blip")


    

    

     

  (let* ((current-speed (-> *display* entity-clock clock-ratio))
         (new-speed (if (< current-speed 10.0)
                        (- current-speed -10.25)  ; si vitesse < 0 → continue vers 0 (monte vers zéro en négatif)
                        (+ current-speed 10.25)))) ; sinon accélère le temps normalement
    (if (>= current-speed 0.0)
        ;; Si vitesse positive ou nulle, transition douce
        (begin
          (update-rates!
            (-> *display* entity-clock)
            (seek current-speed new-speed (* 120.0 (seconds-per-frame))))
          (update-rates! (-> *display* bg-clock) new-speed))
        ;; Sinon vitesse négative ou moins, applique directement new-speed pour remonter
        (begin
          (update-rates! (-> *display* entity-clock) new-speed)
          (update-rates! (-> *display* bg-clock) new-speed))))))

    




































    ;;; JAK SPEED TIME





    (when (and *display* (cpad-hold? 0 square) (cpad-pressed? 0 left))



 (sound-play "oof")


  (let* ((current-speed (-> *display* target-clock clock-ratio))
         (new-speed (- current-speed 0.25))) ;; Toujours on descend la vitesse de 0.25
    (if (<= current-speed 0.0)
        ;; Si temps à 0 ou moins, on applique directement la vitesse calculée (new-speed)
        (update-rates! (-> *display* target-clock) new-speed)
        ;; Sinon on fait la transition doucement (seek)
        (update-rates! 
          (-> *display* target-clock)
          (seek current-speed new-speed (* 120.0 (seconds-per-frame)))))))

















(when (and *display* (cpad-hold? 0 square) (cpad-pressed? 0 right))



 (sound-play "oof")

  (let* ((current-speed (-> *display* target-clock clock-ratio))
         (new-speed (if (< current-speed 0.0)
                        (+ current-speed 0.25)  ; si vitesse < 0, on remonte vers 0
                        (+ current-speed 0.25)))) ; sinon on accélère le temps
    (update-rates!
      (-> *display* target-clock)
      (seek current-speed new-speed (* 120.0 (seconds-per-frame))))))









(when (and *display* (cpad-hold? 0 square) (cpad-pressed? 0 up))
  (sound-play "oof")
  (let* ((current-speed (-> *display* target-clock clock-ratio))
         (new-speed (if (< current-speed 0.0)
                        (+ current-speed 10.25)  ; si vitesse < 0, on remonte vers 0
                        (+ current-speed 10.25)))) ; sinon on accélère le temps
    (update-rates!
     (-> *display* target-clock)
     (seek current-speed new-speed (* 120.0 (seconds-per-frame))))))
















    (when (and *display* (cpad-hold? 0 square) (cpad-pressed? 0 down))



 (sound-play "oof")




(sound-play "skill-pickup")




(update-rates! (-> *display* entity-clock) 1.0)
(update-rates! (-> *display* bg-clock) 1.0)
(update-rates! (-> *display* target-clock) 1.0)
      )




















;;;; --------------------------------------------------------------------------------------------------------------
;;;;  CERCLE ROND SPECIAL TIME DEFINI !
;;;; --------------------------------------------------------------------------------------------------------------












    (when (and *display* (cpad-hold? 0 circle) (cpad-pressed? 0 down))








(update-rates! (-> *display* target-clock) 1.0)



 (sound-play "oof")




(sound-play "skill-pickup")




     
(update-rates! (-> *display* entity-clock) 1.0)
(update-rates! (-> *display* bg-clock) 1.0)
(update-rates! (-> *display* target-clock) 1.0)
      )
















    (when (and *display* (cpad-hold? 0 circle) (cpad-pressed? 0 left))




(update-rates! (-> *display* entity-clock) 0.005)
(update-rates! (-> *display* bg-clock) 0.005)




(sound-play "timer-warn")


      )






    (when (and *display* (cpad-hold? 0 circle) (cpad-pressed? 0 right))




(update-rates! (-> *display* entity-clock) 0.1)
(update-rates! (-> *display* bg-clock) 0.1)




(sound-play "timer-warn")


      )



















    (when (and *display* (cpad-hold? 0 circle) (cpad-pressed? 0 up))





(when *target*

  (birth-pickup-at-point 
    (vector+float! (new-stack-vector0) (-> *target* root trans) 0.0)
    (pickup-type gem)
    1.0
    #t
    *target*
    (the-as fact-info #f)

    
  ))




(when *target*

  (birth-pickup-at-point 
    (vector+float! (new-stack-vector0) (-> *target* root trans) 0.0)
    (pickup-type money)
    1.0
    #t
    *target*
    (the-as fact-info #f)

    
  ))


(when *target*

  (birth-pickup-at-point 
    (vector+float! (new-stack-vector0) (-> *target* root trans) 0.0)
    (pickup-type eco-pill-dark)
    1.0
    #t
    *target*
    (the-as fact-info #f)

    
  ))

(when *target*

  (birth-pickup-at-point 
    (vector+float! (new-stack-vector0) (-> *target* root trans) 0.0)
    (pickup-type eco-pill-green)
    10.0
    #t
    *target*
    (the-as fact-info #f)

    
  ))












(sound-play "explode-small")
(sound-play "explode-large")
(sound-play "money-pickup")
(sound-play "buzzer-pickup")

(sound-play "menu-accept")
(sound-play "menu-denied")
(sound-play "hover-start")
(sound-play "teleport")
(sound-play "warp-in")
(sound-play "gun-shot")
(sound-play "gun-reload")

(sound-play "roll")
(sound-play "roll-end")
(sound-play "dash")
(sound-play "hit-hard")
(sound-play "hit-soft")
(sound-play "spin")
(sound-play "eco-pickup")
(sound-play "eco-spawn")
(sound-play "enemy-alert")
(sound-play "enemy-die")

(sound-play "siren")
(sound-play "warning")
(sound-play "power-on")
(sound-play "vehicle-boost")
(sound-play "vehicle-crash")
(sound-play "vehicle-engine")
(sound-play "talk-blip")



      )



















;;;; --------------------------------------------------------------------------------------------------------------
;;;; GRAVITY L1
;;;; --------------------------------------------------------------------------------------------------------------




















(when (and (cpad-hold? 0 l1) (cpad-pressed? 0 up)  


(when *target*


  (stop 'debug)

 (start 'play (get-current-continue-forced *game-info*))



(define *standard-dynamics*
  (new 'static
       'dynamics
       :name 'standard
       :gravity-max (meters 40)
       :gravity-length (meters 60)
       :gravity (new 'static 'vector :x -952960.0 :y 0.000245760 :z -58215760.0 :w 1.0) 
       :gravity-normal (new 'static 'vector :x 0.01 :y -1.0 :z 0.0 :w 1.0)
       :walk-distance (meters 2)
       :run-distance (meters 5)))



  )))






(when (and (cpad-hold? 0 l1) (cpad-pressed? 0 down)  


(when *target*


  (stop 'debug)

 (start 'play (get-current-continue-forced *game-info*))



(define *standard-dynamics*
  (new 'static
       'dynamics
       :name 'standard
       :gravity-max (meters 40)
       :gravity-length (meters 60)
       :gravity (new 'static 'vector :x 0.0 :y 245760.0 :z 0.0 :w 1.0)
       :gravity-normal (new 'static 'vector :x 0.0 :y 1.0 :z 0.0 :w 1.0)
       :walk-distance (meters 2)
       :run-distance (meters 5)))



  )))








(when (and (cpad-hold? 0 l1) (cpad-pressed? 0 left)  


(when *target*


  (stop 'debug)

 (start 'play (get-current-continue-forced *game-info*))



(define *standard-dynamics*
  (new 'static
       'dynamics
       :name 'standard
       :gravity-max (meters 40)
       :gravity-length (meters 60)
       :gravity (new 'static 'vector :x 0.0 :y 245760.0 :z 245760.0 :w 1.0)
       :gravity-normal (new 'static 'vector :x 0.0 :y 0.0 :z 1.0 :w 1.0)
       :walk-distance (meters 2)
       :run-distance (meters 5)))



  )))






(when (and (cpad-hold? 0 l1) (cpad-pressed? 0 right)  


(when *target*


  (stop 'debug)

 (start 'play (get-current-continue-forced *game-info*))




(define *standard-dynamics*
  (new 'static
       'dynamics
       :name 'standard
       :gravity-max (meters 40)
       :gravity-length (meters 60)
       :gravity (new 'static 'vector :x 0.0 :y 245760.0 :z -245760.0 :w 1.0)
       :gravity-normal (new 'static 'vector :x 0.0 :y 0.0 :z -1.0 :w 1.0)
       :walk-distance (meters 2)
       :run-distance (meters 5)))



  )))










;;;; --------------------------------------------------------------------------------------------------------------
;;;; POUVOIRE L2
;;;; --------------------------------------------------------------------------------------------------------------







(when (and (cpad-hold? 0 l2) (cpad-pressed? 0 up)  


(when *target*


  (stop 'debug)

 (start 'play (get-current-continue-forced *game-info*))






  )))

    










(when (and (cpad-hold? 0 l2) (cpad-pressed? 0 down))
 



    (set-blackout-frames (seconds 0.135))

  (when *target*
    (reset-actors 'play)
    (set! *spawn-actors* #f)


(sound-play "explosion")




))










(when (and (cpad-hold? 0 l2) (cpad-pressed? 0 left)



(when *target*
(draw-my-blue *target*)
)




(set-setting! 'process-mask 'set 0.0 (process-mask enemy platform projectile death actor-pause   sleep sleep-code collectable ambient heap-shrunk )) ;crate




 (set! *pause-lock* #f)





  



))








(when (and (cpad-hold? 0 l2) (cpad-pressed? 0 right)



(when *target*
      (draw-normal *target*) ;; ✅ Jak redevient normal quand le jeu reprend
)

(set! *spawn-actors* #t)


(send-event (ppointer->process *time-of-day*) 'change 'hour 12)


(set-setting! 'process-mask 'clear 0.0 (process-mask enemy platform projectile death   freeze pause menu progress entity movie))



(sound-play "jak-explode")

(sound-play "icrate-break")
             

(sound-play "hit-up")
 


    ;; Donne toutes les munitions et collectibles au target
    (send-event *target* 'get-pickup (pickup-type ammo-yellow) 1000.0)
    (send-event *target* 'get-pickup (pickup-type ammo-red) 1000.0)
    (send-event *target* 'get-pickup (pickup-type ammo-blue) 1000.0)
    (send-event *target* 'get-pickup (pickup-type ammo-dark) 1000.0)
    (send-event *target* 'get-pickup (pickup-type eco-pill-dark) 1000.0)

  ;; Déverrouille tout dans le jeu
    (logior! (-> *game-info* features)
             (game-feature gun gun-yellow gun-red gun-blue gun-dark
                           gun-upgrade-speed gun-upgrade-ammo gun-upgrade-damage
                           pass-red pass-green pass-yellow pass-blue board
                           darkjak darkjak-bomb0 darkjak-bomb1 darkjak-invinc darkjak-giant))

    ;; Active les pouvoirs Dark Jak
    (logior! (-> *game-info* features)
             (game-feature darkjak darkjak-bomb0 darkjak-bomb1 darkjak-invinc darkjak-giant))



  ))



































;;;; --------------------------------------------------------------------------------------------------------------
;;;; ECO POUVOIR SPAWN ! R2
;;;; --------------------------------------------------------------------------------------------------------------





(when (and (cpad-hold? 0 r2) (cpad-pressed? 0 down))



(when *target*

  (birth-pickup-at-point 
    (vector+float! (new-stack-vector0) (-> *target* root trans) 0.0)
    (pickup-type eco-yellow)
    1.0
    #f
    *target*
    (the-as fact-info #f)

 )
  )
)





(when (and (cpad-hold? 0 r2) (cpad-pressed? 0 left))

(when *target*

  (birth-pickup-at-point 
    (vector+float! (new-stack-vector0) (-> *target* root trans) 0.0)
    (pickup-type eco-blue)
    1.0
    #f
    *target*
    (the-as fact-info #f)

    
  ))
)








(when (and (cpad-hold? 0 r2) (cpad-pressed? 0 up))


(when *target*
  (birth-pickup-at-point 
    (vector+float! (new-stack-vector0) (-> *target* root trans) 0.0)
    (pickup-type eco-red)
    1.0
    #f
    *target*
    (the-as fact-info #f)

    
  )
)
)




(when (and (cpad-hold? 0 r2) (cpad-pressed? 0 right))


(when *target*

  (send-event *target* 'reset-pickup 'eco)


  (birth-pickup-at-point 
    (vector+float! (new-stack-vector0) (-> *target* root trans) 0.0)
    (pickup-type eco-green)
    1.0
    #f
    *target*
    (the-as fact-info #f)


)

    
  )
)



























;;;; --------------------------------------------------------------------------------------------------------------
;;;; CHANGE L HEUR R1
;;;; --------------------------------------------------------------------------------------------------------------











;; Passage à 23h
(when (and (cpad-hold? 0 r1) (cpad-pressed? 0 down))
  
  (send-event (ppointer->process *time-of-day*) 'change 'hour 23))

;; Passage à 7h
(when (and (cpad-hold? 0 r1) (cpad-pressed? 0 left))
  (send-event (ppointer->process *time-of-day*) 'change 'hour 7))

;; Passage à 12h
(when (and (cpad-hold? 0 r1) (cpad-pressed? 0 up))
  (send-event (ppointer->process *time-of-day*) 'change 'hour 12))

;; Passage à 18h
(when (and (cpad-hold? 0 r1) (cpad-pressed? 0 right))
  (send-event (ppointer->process *time-of-day*) 'change 'hour 18))











































      (if *show-input-display* 
        (input-display-on)
        (input-display-off)
        )

      (when *debug-segment*
        (orb-placer-maintenance)
        )
      
      (none)
      )

    (defun runs-on-gem-pickup ()
      ;; Code here runs on any scout fly pickup

      (none)
      )

    (defun runs-on-task-close ()
    

      (none)
      )

    (defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
      (let* ((from-vent? #f))
        ;; Code here runs as soon as you pickup ANY eco

        (case eco-type
          (((pickup-type eco-yellow))      
            ;; Code here runs as soon as you pickup yellow eco

            )
          (((pickup-type eco-red))      
            ;; Code here runs as soon as you pickup red eco









            )
          (((pickup-type eco-blue))      
            ;; Code here runs as soon as you pickup blue eco





 (let* ((current-speed (-> *display* target-clock clock-ratio))
         (new-speed (if (< current-speed 0.0)
                        (+ current-speed 2.25)  ; si vitesse < 0, on remonte vers 0
                        (+ current-speed 2.25)))) ; sinon on accélère le temps
    (update-rates!
      (-> *display* target-clock)
      (seek current-speed new-speed (* 120.0 (seconds-per-frame)))))





            )

          (((pickup-type eco-green))      
            ;; Code here runs as soon as you pickup big green eco 

            )
          )
        
        (when from-vent?
          ;; Code here runs only if the eco was picked up from a vent

          )
        )

      (none)
      )

    (defun runs-on-jak-spawn ()
      ;; Code here runs every time jak spawns (loading a file new game or death)   

      (none)
      )

    (defun runs-on-jak-death ((death-event symbol))
      (case death-event
        (('dying)
          ;; Code here runs immediately every time jak dies, before any death animation or death cutscene
          
          )
       
        )
      
      (none)
      )


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; deprecated function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| these are no longer recommended/supported however we include them anyways to not break anyones mods.
    |#
